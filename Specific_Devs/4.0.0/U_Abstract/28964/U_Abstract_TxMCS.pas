///<author>dev@bassetti.fr</author>
///<summary>Unit loading / unloading the dll named "TxMCS". This file is generated by TXUtils. Do not modify.</summary>
unit U_Abstract_TxMCS;
interface

uses
  Windows, SysUtils, Classes, Contnrs, U_Small_Lib, MSXML2_TLB, U_Class, U_Abstract;

type
  {$REGION 'U_Main_TxMCS'}
  TInitializeTxMCS=procedure(const ATxDir: string); stdcall;
  {$ENDREGION}

  {$REGION 'U_RequirementsListWebFunctions'}
  ///<summary>Function initializing the library and returning the json of a given requirements list.</summary>
  ///<summary>First parameter: the path to TEEXMA.</summary>
  ///<summary>Second parameter: the identifier of a selected object type.</summary>
  ///<summary>Third parameter: the identifier of a selected requirements list. it may be null: in that case, the function returns the JSON of a default requirements list on the given Object Type.</summary>
  ///<returns>The function returns a json object corresponding to the requirements list.</returns>
  TOnLoadRequirementsList=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function returning basic informations on numerical attributes.</summary>
  ///<summary>The identifier of the numerical (date or decimal) attribute.</summary>
  ///<returns>The function returns a json object containing 3 pairs:</returns>
  ///<returns>- "iNbData": the number of data visible for the active user.</returns>
  ///<returns>- "fMin": the lower bound value of the data visible for the active user.</returns>
  ///<returns>- "fMax": the upper bound value of the data visible for the active user.</returns>
  TOnDisplayNumericalAttribute=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}

  {$REGION 'U_MCSHelper'}
  TMCSSelectionHelper=class(TID)
  public
    function GetIdObjectType: Integer; virtual; stdcall; abstract;
    function GetNbEvaluatedObjects: Integer; virtual; stdcall; abstract;
    function GetNbSelectedObjects: Integer; virtual; stdcall; abstract;
    function GetNbUnselelectedObjects: Integer; virtual; stdcall; abstract;
    function ListSelectedObjects_: TObjectList; virtual; stdcall; abstract;
    function ListSelectedIdObjects_: TStringList; virtual; stdcall; abstract;
    function GetRequirementsList: TMCS_Requirement_List; virtual; stdcall; abstract;
    function GetResults: TMCS_Results; virtual; stdcall; abstract;
  end;

  TMCSAdvancedHelper=class(TObject)
  public
    function AddSelection(const ARlJSON: string): TMCSSelectionHelper; virtual; stdcall; abstract;
    function CriteriaToAttributesSet_(const ARequirementsList: TMCS_Requirement_List): TS_Attribute_Set; virtual; stdcall; abstract;
    procedure FillAttributesSetWithCriteria(const AAttributesSet: TS_Attribute_Set; const ARequirementsList: TMCS_Requirement_List); virtual; stdcall; abstract;
  end;

  TMCSHelper=class(TObject)
  public
    function AddSelection(const AIdRequirementsList: Integer): TMCSSelectionHelper; overload; virtual; stdcall; abstract;
    function AddSelection(const ARequirementsListTag: string): TMCSSelectionHelper; overload; virtual; stdcall; abstract;
    function Selection(const AIdSelection: Integer): TMCSSelectionHelper; virtual; stdcall; abstract;
    procedure FreeSelection(const AIdSelection: Integer); virtual; stdcall; abstract;
    function Advanced: TMCSAdvancedHelper; virtual; stdcall; abstract;
  end;

  T_MCS=function: TMCSHelper; stdcall;
  {$ENDREGION}

  {$REGION 'U_MCSWebFunctions'}
  ///<summary>Function initializing the library and returning the Object types to display by default (and there default requirements lists).</summary>
  ///<summary>First parameter: the path to TEEXMA.</summary>
  ///<summary>Second parameter: the identifier of a selected object type. Set to 0 (or lower) if not defined.</summary>
  ///<returns>The function returns a json object containing two pairs:</returns>
  ///<returns>- "defaultObjectTypes": the default object types with there default requirements lists. The object type selected by default is added if needed.</returns>
  ///<returns>- "bAllObjectTypesReturned": if true, no default object type is defined: the function returns the whole list of standard, visible object types.</returns>
  TOnInitializeForm=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function returning the object types not displayed by default.</summary>
  ///<summary>First parameter: the identifier of a default object type. Set to 0 (or lower) if not defined.</summary>
  ///<returns>The function returns a json object containing a single pair:</returns>
  ///<returns>- "otherObjectTypes": the "other" standard and visible object types.</returns>
  TOnQueryForMoreObjectTypes=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function returning the list of requirements lists of a given object type</summary>
  ///<summary>if an Object Type is displayed by default, the function apply a filter and returns those not displayed by default.</summary>
  ///<summary>First parameter: the object type identifier. Set to 0 (or lower) if not defined.</summary>
  TOnQueryForMoreRequirementsLists=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function executing a given requirements list.</summary>
  ///<summary>First parameter: the requirements list (its json).</summary>
  ///<returns>The function returns a json object containing a 3 pairs:</returns>
  ///<returns>- "selectedObjects": the objects that passed the selection.</returns>
  ///<returns>- "iNbEvaluatedObjects": the number of objects that were evaluated.</returns>
  ///<returns>- "idCurrentSelection": the identifier of the selection object containing the results. It may be usefull for "more" (specific) treatments on the selected objects.</returns>
  ///<returns>- "modelApplicationsAfterSelection": the model applications to display for the current object types when displaying the results.</returns>
  TOnMultiSelect=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function exporting an excel file from a requirements list.</summary>
  ///<summary>First parameter: the identifier of the selection object containing the results.</summary>
  ///<summary>Second parameter: a boolean for select the rejected objects.</summary>
  ///<returns>The function returns a json object containing a 1 pair:</returns>
  ///<returns>- "sFileName": the name of the excel file created.</returns>
  TOnSimplifiedExport=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function freeing a given selection object.</summary>
  ///<summary>First parameter: the identifier of the selection object.</summary>
  TFreeSelection=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}



var
  {$REGION 'U_Main_TxMCS'}
  InitializeTxMCS: TInitializeTxMCS;
  {$ENDREGION}

  {$REGION 'U_RequirementsListWebFunctions'}
  OnLoadRequirementsList: TOnLoadRequirementsList;
  OnDisplayNumericalAttribute: TOnDisplayNumericalAttribute;
  {$ENDREGION}

  {$REGION 'U_MCSHelper'}
  _MCS: T_MCS;
  {$ENDREGION}

  {$REGION 'U_MCSWebFunctions'}
  OnInitializeForm: TOnInitializeForm;
  OnQueryForMoreObjectTypes: TOnQueryForMoreObjectTypes;
  OnQueryForMoreRequirementsLists: TOnQueryForMoreRequirementsLists;
  OnMultiSelect: TOnMultiSelect;
  OnSimplifiedExport: TOnSimplifiedExport;
  FreeSelection: TFreeSelection;
  {$ENDREGION}


///<summary>Procedure loading the dll named "TxMCS".</summary>
///<param name="AFilePath">The absolute path to the dll.</param>
procedure Load_TxMCS(AFilePath: string);

///<summary>Procedure unloading the dll named "TxMCS".</summary>
procedure Unload_TxMCS;

///<summary>Function returning true if the dll "TxMCS" was loaded.</summary>
function Get_Dll_TxMCS_Loaded: boolean;

implementation

var
  hDll: THandle;

procedure Load_TxMCS(AFilePath: string);
resourcestring
  RS_Error_Invalide_File='Le fichier %s n''est pas valide.';
begin
  if hDll <> 0 then
    exit;

  Check_FileExists(AFilePath);

  hDll := Load_Dll(AFilePath);

  {$REGION 'U_Main_TxMCS'}
  @InitializeTxMCS := Get_Dll_Function_Adress(hDll,'InitializeTxMCS',AFilePath);
  {$ENDREGION}

  {$REGION 'U_RequirementsListWebFunctions'}
  @OnLoadRequirementsList := Get_Dll_Function_Adress(hDll,'OnLoadRequirementsList',AFilePath);
  @OnDisplayNumericalAttribute := Get_Dll_Function_Adress(hDll,'OnDisplayNumericalAttribute',AFilePath);
  {$ENDREGION}

  {$REGION 'U_MCSHelper'}
  @_MCS := Get_Dll_Function_Adress(hDll,'_MCS',AFilePath);
  {$ENDREGION}

  {$REGION 'U_MCSWebFunctions'}
  @OnInitializeForm := Get_Dll_Function_Adress(hDll,'OnInitializeForm',AFilePath);
  @OnQueryForMoreObjectTypes := Get_Dll_Function_Adress(hDll,'OnQueryForMoreObjectTypes',AFilePath);
  @OnQueryForMoreRequirementsLists := Get_Dll_Function_Adress(hDll,'OnQueryForMoreRequirementsLists',AFilePath);
  @OnMultiSelect := Get_Dll_Function_Adress(hDll,'OnMultiSelect',AFilePath);
  @OnSimplifiedExport := Get_Dll_Function_Adress(hDll,'OnSimplifiedExport',AFilePath);
  @FreeSelection := Get_Dll_Function_Adress(hDll,'FreeSelection',AFilePath);
  {$ENDREGION}


end;

procedure Unload_TxMCS;
begin
  if hDll <> 0 then
  begin
    try
      FreeLibrary(hDll);
      hDll := 0;
    except
    end;
  end;
end;

function Get_Dll_TxMCS_Loaded: boolean;
begin
  result := (hDll>0)
end;

initialization
  hDll := 0;

finalization
  Unload_TxMCS;

end.