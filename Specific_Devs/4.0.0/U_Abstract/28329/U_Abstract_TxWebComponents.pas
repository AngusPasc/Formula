///<author>dev@bassetti.fr</author>
///<summary>Unit loading / unloading the dll named "TxWebComponents". This file is generated by TXUtils. Do not modify.</summary>
unit U_Abstract_TxWebComponents;
interface

uses
  Windows,SysUtils,Classes,Contnrs,Math,U_Small_Lib,U_Class,Generics.Collections,dbxJSON,U_Abstract;

type
  {$REGION 'U_Const_TxWebTree'}
  TCheckState=(
    csUncheckedNormal,
    csUncheckedPressed,
    csCheckedNormal,
    csCheckedPressed,
    csMixedNormal,
    csMixedPressed);

  TCheckType=(
    ctNone,
    ctCheckBox,
    ctRadioButton);
  {$ENDREGION}

  {$REGION 'U_WebNode'}
  TWebNode=class(TTree)
  public
    function Get_ID_Node: Integer; virtual; stdcall; abstract;
    procedure Set_CheckState(const ACheckState: TCheckState); virtual; stdcall; abstract;
    function Get_CheckState: TCheckState; virtual; stdcall; abstract;
    procedure Set_CheckType(const ACheckType: TCheckType); virtual; stdcall; abstract;
    function Get_CheckType: TCheckType; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_WebCoupledObject'}
  ///<summary>Class handling an object and it "visual" associated object.</summary>
  TWebCoupled_Object=class(TTree)
  public
    ///<summary>Getter for the variable "rObject_Viewed".</summary>
    ///<summary>The object to display.</summary>
    function Get_Object_Viewed: TWebNode; virtual; stdcall; abstract;
    ///<summary>Setter for the variable "rObject".</summary>
    ///<summary>The associated object.</summary>
    procedure Set_Object(const AObject: TObject); virtual; stdcall; abstract;
    ///<summary>Getter for the variable "rObject".</summary>
    ///<summary>The associated object.</summary>
    function Get_Object: TObject; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_Main_TxWebComponents'}
  TUpdateTxWebComponentLanguage=procedure(const ALanguage: string); stdcall;
  {$ENDREGION}

  {$REGION 'U_Object'}
  TobjectsToJSON=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TobjectsFromIdsToJSON=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TobjectsFromValueToJSON=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TdoObjectsToJSON=function(const aIdOT: Integer; const aIdParent: Integer; const aRecursive: Boolean=False; const aIncludeFolder: Boolean=False; const aRemoveTrashedObj: Boolean=True): string; stdcall;

  TolObjectsToJSON=function(const AOL_Objects: TObjectList): string; stdcall;

  TgetIdsObjectFromParent=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TgetObjectHint=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TgetObjectPath=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TremoveObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TswitchFolderObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TcompareObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TrenameObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TsortObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TmoveObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TwGetTxPropertyInfo=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TwGetTxDuplicationInfo=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TwGetTxCompareInfo=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TgetContextMenuOptions=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TgetContextMenuApplicationModelOptions=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TtrySwitchToReference=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TswitchDocumentAsReference=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TtryVersionning=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TcreateVersionnedDocument=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TExpandBranch=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}

  {$REGION 'U_BusinessObject'}
  TbusinessObjectsToJSON=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TgetContextMenuBusinessOptions=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TaddBusinessObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TUpdateBusinessObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TCreateBusinessObjects=function(const AIdView: Integer; const AIdParent: Integer; const ASLParents: TStringList=nil; const ARecursive: Boolean=False): TJSONArray; stdcall;

  TgetBusinessObjectPath=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}

  {$REGION 'U_Object_Type'}
  TOTsToJSON=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TdoOTsToJSON=function(const AArrObjectTypeTypes: array of Integer): string; stdcall;

  TListOTsToJSON=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TDoListOTsToJSON=function(const AIdsOT: string): string; stdcall;

  TgetOTHint=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TdoGetOTHint=function(const aIdOT: Integer): string; stdcall;
  {$ENDREGION}

  {$REGION 'U_Array'}
  TgetDataTableAndTableType=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TsaveDataTable=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TfillDataTable=procedure(const aIdObject: Integer; const aIdAttribute: Integer; const aData: string; const aOlData: TObjectList); stdcall;

  TExportTable=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}

  {$REGION 'U_Associatives'}
  TassoToJSON=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TsaveAsso=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}

  {$REGION 'U_Publisher'}
  TgetDataFileFiles=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TgetArchivedFiles=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TsaveDataFile=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TDeleteFile=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TfillDataFile=procedure(const aIdObject: Integer; const aIdAttribute: Integer; const aData: string; const AOlData: TObjectList); stdcall;
  {$ENDREGION}

  {$REGION 'U_Attribute'}
  TAttributeDisplayRule=(
    adrCheckable,
    adrAll);

  TTypeSLTD=(
    ttdAutorized,
    ttdForbidden);

  TattributesToJSON=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TdoAttributesToJSON=function(const aIdOT: Integer; const aIdParent: Integer; const aRecursiveLink: Boolean; const aDisplayAssociativeOT: Boolean; const aInheritedAttributeCheckable: Boolean; const aADR: TAttributeDisplayRule; const aTypeSLTD: TTypeSLTD; const aSLTD: TStringList): string; stdcall;

  TgetAttributeHint=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TgetIdsAttributesFromParent=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TGetExportation=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}

  {$REGION 'U_WebTree'}
  TListType=(
    ltNone,
    ltBlack_List,
    ltWhite_List);

  TNodeCheckMode=(
    ///Nodes are checkable, independantly of their kinship.
    ncmIndependant,
    ///Checking a node triggers the checking of its children nodes.
    ncmAscending,
    ///Checking a node triggers the checking of its kinship.
    ncmDescending,
    ///Checking a node triggers the checking of its kinship and its children nodes.
    ncmHybrid);

  TWebTree=class(TNamed)
  public
    procedure Clear; virtual; stdcall; abstract;
    function Create_OL_For_Branch(const AParentNode: TWebNode; const ARecursive: Boolean=False; const AAdd: Boolean=False): TObjectList; virtual; stdcall; abstract;
    procedure Fill_OL_Children(const AParentNode: TWebNode; const AOL_Children: TObjectList; const ARecursive: Boolean=False); virtual; stdcall; abstract;
    procedure Fill_OL_From_Preselection(const ASL_ID_Object: TStringList; const AOL_Obj: TObjectList); virtual; stdcall; abstract;
    function AddNodes(const AParentNode: TWebNode; const AOL_Nodes: TObjectList): TObjectList; virtual; stdcall; abstract;
    function AddNode(const AObject: TTree; const AParent_Node: TWebNode=nil; const AInsert_Node: TWebNode=nil): TWebNode; virtual; stdcall; abstract;
    function Add_Nodes(const AOL: TObjectList; const AID: Integer; const AID_Parent: Integer; const AExpand_Nodes: Boolean=False): string; virtual; stdcall; abstract;
    procedure InitNode(const AParentNode: TWebNode; const ANode: TWebNode); virtual; stdcall; abstract;
    function DoAdd_Nodes(const AOL: TObjectList; const AID_Parent: Integer; const AExpand_Node: Boolean): string; virtual; stdcall; abstract;
    function DoAdd_Node(const AObj: TWebNode; const AOL_Obj: TObjectList; const ASelect: Boolean; const AExpand_Node: Boolean): string; virtual; stdcall; abstract;
    procedure Add_To_CheckList(const AID: Integer); virtual; stdcall; abstract;
    procedure Add_To_DisplayList(const AID: Integer); virtual; stdcall; abstract;
    procedure Remove_From_CheckList(const AID: Integer); virtual; stdcall; abstract;
    procedure Set_Node_Types_Checkability(const AArr_TD: array of Integer; const AList_Type: TListType; const AFolders_Checkable: Boolean); virtual; stdcall; abstract;
    procedure Set_Nodes_Checkability(const ASL_ID: TStringList; const AList_Type: TListType); virtual; stdcall; abstract;
    procedure Set_Checked_Nodes(const ASL_IDs_Checked: TStringList); overload; virtual; stdcall; abstract;
    procedure Set_Checked_Nodes(const AIDs_Checked: string); overload; virtual; stdcall; abstract;
    procedure Reset_Nodes_CheckStates; virtual; stdcall; abstract;
    procedure CheckNode(const ANode: TTree; var ANodeChecked: string; const AChecked: Boolean=True); virtual; stdcall; abstract;
    function Checking(const ANode: TWebNode; var NewState: TCheckState; var Allowed: Boolean): string; virtual; stdcall; abstract;
    function Uncheck_Nodes(const ANode: TWebNode): string; virtual; stdcall; abstract;
    function Check_Nodes(const ANode: TWebNode): string; virtual; stdcall; abstract;
    function Check_All_Nodes: string; virtual; stdcall; abstract;
    function Uncheck_All_Nodes: string; virtual; stdcall; abstract;
    function DoGet_JS_Check_Nodes(const ANode: TWebNode; const AOL_Object: TObjectList; const AChecked: Boolean=True): string; virtual; stdcall; abstract;
    function Get_Node_Checkability(const AObj: TTree; const ACheck_Checkable_IDs: Boolean=False): Boolean; overload; virtual; stdcall; abstract;
    function Get_Node_Checkability(const AID_Object: Integer; const AFolder: Boolean; const ATD: Integer; const ACheck_Checkable_IDs: Boolean=False): Boolean; overload; virtual; stdcall; abstract;
    function ModifyNodeCheckState(const ANode: TWebNode; ANew_CS: TCheckState): string; virtual; stdcall; abstract;
    function ModifyBranchCheckState(const AParentNode: TWebNode; const ANewCS: TCheckState; var ABranch: string): string; virtual; stdcall; abstract;
    procedure Set_Disabled_Nodes(const AIDs_Disabled: string); overload; virtual; stdcall; abstract;
    function Expand_Node(const AParentNode: TWebNode): string; virtual; stdcall; abstract;
    function Initialize: string; virtual; stdcall; abstract;
    function Switch_To_Linear_View: string; virtual; stdcall; abstract;
    function Switch_To_Tree_View: string; virtual; stdcall; abstract;
    function GetJS_Initialize: string; virtual; stdcall; abstract;
    function GetJS_Reload: string; virtual; stdcall; abstract;
    function Get_OL_Nodes: TObjectList<TTree>; virtual; stdcall; abstract;
    function Get_Node_FromIndex(const AIndex: Integer): TTree; virtual; stdcall; abstract;
    function Get_WebNode_FromIndex(const AIndex: Integer): TWebNode; virtual; stdcall; abstract;
    function Get_Node_FromIdObject(const AID_Object: Integer): TWebNode; virtual; stdcall; abstract;
    function Get_NodeFromWebNode(const AWebNode: TWebNode): TTree; virtual; stdcall; abstract;
    function Get_WebNode(const ANode: TTree): TWebNode; virtual; stdcall; abstract;
    function Get_CoupledObjectFromNode(const ANode: TWebNode): TWebCoupled_Object; virtual; stdcall; abstract;
    procedure Set_FolderCheckable(const AFolderCheckable: Boolean); virtual; stdcall; abstract;
    procedure Set_Check_Type(const ACheck_Type: TCheckType); virtual; stdcall; abstract;
    function Get_Check_Type: TCheckType; virtual; stdcall; abstract;
    procedure Set_Read_Only(const ARead_Only: Boolean); virtual; stdcall; abstract;
    function Check_Read_Only: Boolean; virtual; stdcall; abstract;
    procedure Set_ID_Default_Icon(const AID_Default_Icon: Integer); virtual; stdcall; abstract;
    function Get_ID_Default_Icon: Integer; virtual; stdcall; abstract;
    procedure Set_ID_Div_Tree(const AID_Div_Tree: string); virtual; stdcall; abstract;
    function Get_ID_Div_Tree: string; virtual; stdcall; abstract;
    procedure Set_Width(const AWidth: string); virtual; stdcall; abstract;
    function Get_Width: string; virtual; stdcall; abstract;
    procedure Set_Height(const AHeight: string); virtual; stdcall; abstract;
    function Get_Height: string; virtual; stdcall; abstract;
    procedure Set_Skin(const ASkin: string); virtual; stdcall; abstract;
    function Get_Skin: string; virtual; stdcall; abstract;
    function Attached_To_Layout: Boolean; virtual; stdcall; abstract;
    procedure Set_Default_Icon(const ADefault_Icon: string); virtual; stdcall; abstract;
    function Get_Default_Icon: string; virtual; stdcall; abstract;
    function Get_SL_ID_Checked: TStringList; virtual; stdcall; abstract;
    procedure Set_ID_Parent_Filtering(const AID_Parent_Filtering: Integer); virtual; stdcall; abstract;
    function Get_ID_Parent_Filtering: Integer; virtual; stdcall; abstract;
    procedure Set_OL_Object(const AOL_Object: TObjectList); virtual; stdcall; abstract;
    procedure Set_NoChild(const ANoChild: Boolean); virtual; stdcall; abstract;
    procedure Set_Object_Handling_Mode(const AObject_Handling_Mode: TObject_Handling_Mode); virtual; stdcall; abstract;
    procedure Set_NodeCheckMode(const ANodeCheckMode: TNodeCheckMode); virtual; stdcall; abstract;
    function Get_NodeCheckMode: TNodeCheckMode; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TBButton'}
  TButton_Type=(
    btButton,
    btButtonSelect,
    btLabel,
    btInput);

  TWeb_Button=class(TNamed)
  public
    function Get_ID_Parent: string; virtual; stdcall; abstract;
    function Get_Icon_Enabled: string; virtual; stdcall; abstract;
    function Get_Icon_Disabled: string; virtual; stdcall; abstract;
    function Get_Button_Type: TButton_Type; virtual; stdcall; abstract;
    function Get_Add_Separator: Boolean; virtual; stdcall; abstract;
    function Get_Add_Spacer: Boolean; virtual; stdcall; abstract;
    procedure Set_Hint(const AHint: string); virtual; stdcall; abstract;
    procedure Set_Enabled(const AEnabled: Boolean); virtual; stdcall; abstract;
    function Get_Enabled: Boolean; virtual; stdcall; abstract;
    procedure Set_Visibled(const AVisible: Boolean); virtual; stdcall; abstract;
    function Get_Visibled: Boolean; virtual; stdcall; abstract;
    procedure Set_Caption(const ACaption: string); virtual; stdcall; abstract;
    function Get_Caption: string; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TBWebTree'}
  TWeb_TBTree=class(TWebTree)
  public
    procedure Init_CommonParameters(const AID_Div_Tree: string; const AID_Div_Toolbar: string; const ACheckType: TCheckType; const AAllow_SwitchView: Boolean; const AAllow_Search: Boolean); virtual; stdcall; abstract;
    procedure Set_Button_Visible(AID: string; AVisible: Boolean); virtual; stdcall; abstract;
    function Switch_To_Linear_View_And_Search(AValue: string): string; virtual; stdcall; abstract;
    function Create_OL_Object_From_Text_Search(AValue: string): TObjectList; virtual; stdcall; abstract;
    procedure Fill_OL_From_TextSearch(const AValue: string; const AOL_Obj: TObjectList); virtual; stdcall; abstract;
    function Get_Button(AName: string): TWeb_Button; virtual; stdcall; abstract;
    function Check_Button_Visible(AID: string): Boolean; virtual; stdcall; abstract;
    function GetJS_Add_Button: string; virtual; stdcall; abstract;
    function GetJS_Buttons_State: string; virtual; stdcall; abstract;
    function GetJS_Hide_Button(const AID_Button: string): string; virtual; stdcall; abstract;
    function GetJS_Show_Button(const AID_Button: string): string; virtual; stdcall; abstract;
    function DoGetJS_Show_Button(const AID_Button: string; AShow: Boolean=True): string; virtual; stdcall; abstract;
    function GetJS_Switch_To_Linear_View: string; virtual; stdcall; abstract;
    function GetJS_Switch_To_Treeview_View: string; virtual; stdcall; abstract;
    function GetJS_Reload_JSON(const AJSON_Data: string): string; virtual; stdcall; abstract;
    function GetJS_Clear_Tree: string; virtual; stdcall; abstract;
    function GetJS_OnEnter(const AValue: string): string; virtual; stdcall; abstract;
    procedure Set_ID_Div_Toolbar(const AID_Div_Toolbar: string); virtual; stdcall; abstract;
    function Get_ID_Div_Toolbar: string; virtual; stdcall; abstract;
    procedure Set_Visible(const AVisible: Boolean); virtual; stdcall; abstract;
    function Get_Visible: Boolean; virtual; stdcall; abstract;
    procedure Set_Allow_Modifications(const AAllow_Modifications: Boolean); virtual; stdcall; abstract;
    function Get_Allow_Modifications: Boolean; virtual; stdcall; abstract;
    procedure Set_Allow_Moves(const AAllow_Moves: Boolean); virtual; stdcall; abstract;
    function Get_Allow_Moves: Boolean; virtual; stdcall; abstract;
    procedure Set_Allow_Add_Child(const AAllow_SB_Add_Child: Boolean); virtual; stdcall; abstract;
    function Get_Allow_Add_Child: Boolean; virtual; stdcall; abstract;
    procedure Set_Allow_Search(const AAllow_Search: Boolean); virtual; stdcall; abstract;
    function Get_Allow_Search: Boolean; virtual; stdcall; abstract;
    procedure Set_Allow_Switch_View(const AAllow_Switch_View: Boolean); virtual; stdcall; abstract;
    function Get_Allow_Switch_View: Boolean; virtual; stdcall; abstract;
    function Get_Toolbar_Name: string; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TBWObjTree'}
  TWeb_ObjTree=class(TWeb_TBTree)
  public
    procedure Set_ID_OT(const AID_OT: Integer); virtual; stdcall; abstract;
    function Get_ID_OT: Integer; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TBWListObjTree'}
  TWeb_ListObjTree=class(TWeb_TBTree)
  public
    procedure Set_SL_ID_Objects(const ASL_ID_Objects: TStringList); overload; virtual; stdcall; abstract;
    procedure Set_SL_ID_Objects(const AID_Object: string); overload; virtual; stdcall; abstract;
    function Get_SL_ID_Objects: TStringList; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TBWListOTTree'}
  TWeb_ListOTTree=class(TWeb_TBTree)
  public
    procedure Set_SL_ID_OT(const ASL_ID_OT: TStringList); overload; virtual; stdcall; abstract;
    procedure Set_SL_ID_OT(const AIDs_OT: string); overload; virtual; stdcall; abstract;
    function Get_SL_ID_OT: TStringList; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TBWAttributeTree'}
  TWeb_AttributeTree=class(TWeb_TBTree)
  public
    function Create_OL_Attribute_Filtered(AID_OT: Integer; AOL_Attribute: TObjectList): TObjectList; virtual; stdcall; abstract;
    procedure Initialize_AttributeParameters(const AID_OT: Integer; const ARecursive: Boolean; const ADisplay_Associative_OT: Boolean; const AAllow_Check_Associative: Boolean); virtual; stdcall; abstract;
    procedure Set_ID_OT(const AID_OT: Integer); virtual; stdcall; abstract;
    function Get_ID_OT: Integer; virtual; stdcall; abstract;
    procedure Add_Ckeck_TD(ATD: Integer); virtual; stdcall; abstract;
    procedure Set_Type_SL_TD(AType_SL_TD: TTypeSLTD); virtual; stdcall; abstract;
    function Check_Node_Couple_Parent(const ANode: TWebNode): string; virtual; stdcall; abstract;
    function Get_Object_Couple_Parent(const ANode: TWebNode): TWebCoupled_Object; virtual; stdcall; abstract;
    function Get_Node_Couple_Parent(const ANode: TWebNode): TWebNode; overload; virtual; stdcall; abstract;
    procedure SetInheritedAttributesCheckable(const ACheckable: Boolean); overload; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TBWAttributeSetTree'}
  TLink_String_Check_Type=(
    lsctSingle,
    lsctMany);

  TWeb_AttributeSetTree=class(TWeb_AttributeTree)
  public
    procedure Set_AttributeSet(const AAttributeSet: TS_Attribute_Set); overload; virtual; stdcall; abstract;
    procedure Set_AttributeSet(const AID_AttributeSet: Integer); overload; virtual; stdcall; abstract;
    function Get_AttributeSet: TS_Attribute_Set; virtual; stdcall; abstract;
    procedure Set_Link_Check_Type(const ALSCT: TLink_String_Check_Type); virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TBWListAttributeTree'}
  TWeb_ListAttributeTree=class(TWeb_TBTree)
  public
    procedure Set_SL_ID_Attributes(const ASL_ID_Attributes: TStringList); overload; virtual; stdcall; abstract;
    procedure Set_SL_ID_Attributes(const AIDs_Attributes: string); overload; virtual; stdcall; abstract;
    function Get_SL_ID_Attributes: TStringList; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_WebTree_Manager'}
  TDoAdd_WebTree=function(const ATree: TWebTree): TWebTree; stdcall;

  TGet_WebTree=function(const AName: string): TWebTree; stdcall;

  TGet_WebTree_SL_ID_Checked=function(const AName: string): TStringList; stdcall;

  TGet_WebTree_IdObjectsChecked=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  ///<summary>function returns json structure of root node.</summary>
  ///<param name="AArr_Input">array of tree sid.</param>
  TOnRootNodeExpand=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  ///<summary>function returns json structure of expanding node.</summary>
  ///<param name="AArr_Input">array of tree sid and parent node id expanding.</param>
  TOnExpand=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TOnCheck=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TOnSelect=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TSet_IDs_Object_Checked=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TSet_IDs_Object_Disabled=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TCheck_All=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TUnCheck_All=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TSwitch_To_Linear_View=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TSwitch_To_TreeView_View=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TOnSearchEditEnter=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TGetNodesLegacy=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWB_ObjTree object and returning the javascript code allowing to initialize the client side.</summary>
  TAdd_ObjTree=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWB_ObjTree object and returning it.</summary>
  TDoAdd_ObjTree=function(const AID_OT: Integer; const AID_Div_Tree: string; const AID_Div_Toolbar: string; const ACheckType: TCheckType; const AAllow_Switch_View: Boolean; const AAllow_Search: Boolean; const AIDs_Object_Checked: string; const AID_Object_Parent: Integer; const AIDs_Object_Disabled: string): TWeb_ObjTree; stdcall;

  ///<summary>Function creating a new TWB_ObjTree object and returning the javascript code allowing to initialize the client side.</summary>
  TAdd_ListObjTree=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWB_ObjTree object and returning the javascript code allowing to initialize the client side.</summary>
  TAdd_ListOTTree=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWeb_AttributeSetTree object and returning the javascript code allowing to initialize the client side.</summary>
  TAdd_AttributeSetTree=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWeb_AttributeSetTree object and returning it.</summary>
  TDoAdd_AttributeSetTree=function(const AID_Attribute_Set: Integer; const AID_Div_Tree: string; const AID_Div_Toolbar: string; const ACheckType: TCheckType; const ARecursive_Link: Boolean; const ADisplay_Associative_OT: Boolean; const AAllow_Check_Associative: Boolean; const AIDs_Object_Checked: string; const AIDs_Object_Disabled: string): TWeb_AttributeSetTree; stdcall;

  ///<summary>Function creating a new TWB_ObjTree object and returning the javascript code allowing to initialize the client side.</summary>
  TAdd_AttributeTree=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWB_ObjTree object and returning it.</summary>
  TDoAdd_AttributeTree=function(const AID_OT: Integer; const AID_Div_Tree: string; const AID_Div_Toolbar: string; const ACheckType: TCheckType; const ARecursive_Link: Boolean; const ADisplay_Associative_OT: Boolean; const AAllow_Check_Associative: Boolean; const AIDs_Object_Checked: string; const AIDs_Object_Disabled: string): TWeb_AttributeTree; stdcall;

  ///<summary>Function creating a new TWB_ObjTree object and returning the javascript code allowing to initialize the client side.</summary>
  TAdd_ListAttributeTree=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TDoRemoveTree=procedure(const AID_Tree: string); stdcall;
  {$ENDREGION}

  {$REGION 'U_WCOption'}
  TWCOption=class(TNamed)
  public
    procedure Initialize_Option(AID: Integer; AID_Parent: Integer; AValue: string; APath_File_Icon: string=''; ALevel: Integer=0; ACss: string=''); overload; virtual; stdcall; abstract;
    procedure SetIconFilePath(APath_File_Icon: string); virtual; stdcall; abstract;
    function GetIconFilePath: string; virtual; stdcall; abstract;
    procedure Set_CSS(ACSS: string); virtual; stdcall; abstract;
    function Get_CSS: string; virtual; stdcall; abstract;
    procedure Set_Selected(ASelected: Boolean); virtual; stdcall; abstract;
    function Get_Selected: Boolean; virtual; stdcall; abstract;
    ///<summary>Setter for the variable "iLevel".</summary>
    ///<summary>The level permit to position the option horizontally.</summary>
    procedure Set_Level(ALevel: Integer); virtual; stdcall; abstract;
    ///<summary>Getter for the variable "iLevel".</summary>
    ///<summary>The level permit to position the option horizontally.</summary>
    function Get_Level: Integer; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_WebCombo'}
  TCombo_Option_Type=(
    cotOT,
    cotObject);

  TWebCombo=class(TNamed)
  public
    procedure Clear; virtual; stdcall; abstract;
    procedure Init_CommonParameters(const AID_Div_Combo: string; const AWidth: Integer; const AHeight: Integer; const AContains_Img: Boolean; const ADefault_Option: string); virtual; stdcall; abstract;
    procedure Fill_OL_Options; virtual; stdcall; abstract;
    procedure Set_ID_Object_ToSelect(const AID_Object_ToSelect: Integer); virtual; stdcall; abstract;
    function Get_ID_Object_ToSelect: Integer; virtual; stdcall; abstract;
    function Initialize: string; virtual; stdcall; abstract;
    function Get_XML_Options: string; virtual; stdcall; abstract;
    function AddOption(const AID: Integer; const AID_Parent: Integer; const AValue: string; const APath_File_Icon: string=''; const ALevel: Integer=0; const ACss: string=''): TWCOption; virtual; stdcall; abstract;
    function Add_SimpleOption(const AName: string): TWCOption; virtual; stdcall; abstract;
    function Get_Read_Only: Boolean; virtual; stdcall; abstract;
    procedure Set_ID_Div_Combo(AID_Div_Combo: string); virtual; stdcall; abstract;
    function Get_ID_Div_Combo: string; virtual; stdcall; abstract;
    procedure Set_Default_Option(ADefault_Option: string); virtual; stdcall; abstract;
    function Get_Default_Option: string; virtual; stdcall; abstract;
    procedure Set_Css(ACss: string); virtual; stdcall; abstract;
    function Get_Css: string; virtual; stdcall; abstract;
    procedure Set_Width(AWidth: Integer); virtual; stdcall; abstract;
    function Get_Width: Integer; virtual; stdcall; abstract;
    procedure Set_Max_Heigh(AMax_Heigh: Integer); virtual; stdcall; abstract;
    function Get_Max_Heigh: Integer; virtual; stdcall; abstract;
    procedure Set_OL_Options(AOL_Options: TOL_Named); virtual; stdcall; abstract;
    function Get_OL_Options: TOL_Named; virtual; stdcall; abstract;
    procedure Set_Contains_Img(const AContains_Img: Boolean); virtual; stdcall; abstract;
    procedure Set_OL_Object(const AOL_Object: TObjectList); virtual; stdcall; abstract;
    function GetJS_Initialize: string; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_WCOT'}
  TWCOT=class(TWebCombo)
  public
    procedure Fill_OL_Options_With_Indentation(AID_OT_Parent: Integer=0; ALevel: Integer=0); virtual; stdcall; abstract;
    procedure Set_DisplayAssociatives(const ADisplayAssociatives: Boolean); virtual; stdcall; abstract;
    function Get_DisplayAssocitives: Boolean; virtual; stdcall; abstract;
    procedure Set_DisplayPortals(const ADisplayPortals: Boolean); virtual; stdcall; abstract;
    function Get_DisplayPortals: Boolean; virtual; stdcall; abstract;
    procedure Set_DisplayListing(const ADisplayListing: Boolean); virtual; stdcall; abstract;
    function Get_DisplayListing: Boolean; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_WCListOT'}
  TWCListOT=class(TWebCombo)
  public
    procedure Set_SL_ID_OT(const ASL: TStringList); overload; virtual; stdcall; abstract;
    procedure Set_SL_ID_OT(const AIDs_OT: string); overload; virtual; stdcall; abstract;
    function Get_SL_ID_OT: TStringList; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_WCObject'}
  TWC_Object=class(TWebCombo)
  public
    procedure Set_ID_OT(const AID_OT: Integer); virtual; stdcall; abstract;
    function Get_ID_OT: Integer; virtual; stdcall; abstract;
    procedure Set_ID_Parent(const AID_Parent: Integer); virtual; stdcall; abstract;
    function Get_ID_Parent: Integer; virtual; stdcall; abstract;
    procedure Set_Recursive(const ARecursive: Boolean); virtual; stdcall; abstract;
    function Get_Recursive: Boolean; virtual; stdcall; abstract;
    procedure Set_Include_Folders(const AInclude_Folders: Boolean); virtual; stdcall; abstract;
    function Get_Include_Folders: Boolean; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_WCStandard'}
  TWCStandard=class(TWebCombo)
  public
    procedure Set_SL_Name(const ASL: TStringList); overload; virtual; stdcall; abstract;
    procedure Set_SL_Name(const AOptions: string); overload; virtual; stdcall; abstract;
    function Get_SL_Name: TStringList; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_WebCombo_Manager'}
  TInitialize_Combo=function(AArr_Input: TArr_VarRec): TArr_VarRec; stdcall;

  TDoAdd_WebCombo=function(const ACombo: TWebCombo): TWebCombo; stdcall;

  TGet_WebCombo=function(const AName: string): TWebCombo; stdcall;

  ///<summary>Function creating a new TWCOT object and returning the javascript code allowing to initialize then client side.</summary>
  TAdd_ComboOT=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWCOT object and returning it.</summary>
  TDoAdd_ComboOT=function(const AArr_Input: array of TVarRec): TWCOT; stdcall;

  ///<summary>Function creating a new TWCOT object and returning the javascript code allowing to initialize then client side.</summary>
  TAdd_ComboListOT=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWCOT object and returning it.</summary>
  TAdd_ComboListOT_Ext=function(AArr_Input: array of TVarRec): TWCListOT; stdcall;

  ///<summary>Function creating a new TWCObject object and returning the javascript code allowing to initialize then client side.</summary>
  TAdd_ComboObject=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWCObject object and returning it.</summary>
  TAdd_ComboObject_Ext=function(AArr_Input: array of TVarRec): TWC_Object; stdcall;

  TDoAdd_ComboObject=function(AArr_Input: array of TVarRec): TWC_Object; stdcall;

  ///<summary>Function creating a new TWCStd object and returning the javascript code allowing to initialize then client side.</summary>
  TAdd_ComboStd=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function creating a new TWCStd object and returning it.</summary>
  TAdd_ComboStd_Ext=function(AArr_Input: array of TVarRec): TWCStandard; stdcall;
  {$ENDREGION}



var
  {$REGION 'U_Main_TxWebComponents'}
  UpdateTxWebComponentLanguage: TUpdateTxWebComponentLanguage;
  {$ENDREGION}

  {$REGION 'U_Object'}
  objectsToJSON: TobjectsToJSON;
  objectsFromIdsToJSON: TobjectsFromIdsToJSON;
  objectsFromValueToJSON: TobjectsFromValueToJSON;
  doObjectsToJSON: TdoObjectsToJSON;
  olObjectsToJSON: TolObjectsToJSON;
  getIdsObjectFromParent: TgetIdsObjectFromParent;
  getObjectHint: TgetObjectHint;
  getObjectPath: TgetObjectPath;
  removeObject: TremoveObject;
  switchFolderObject: TswitchFolderObject;
  compareObject: TcompareObject;
  renameObject: TrenameObject;
  sortObject: TsortObject;
  moveObject: TmoveObject;
  wGetTxPropertyInfo: TwGetTxPropertyInfo;
  wGetTxDuplicationInfo: TwGetTxDuplicationInfo;
  wGetTxCompareInfo: TwGetTxCompareInfo;
  getContextMenuOptions: TgetContextMenuOptions;
  getContextMenuApplicationModelOptions: TgetContextMenuApplicationModelOptions;
  trySwitchToReference: TtrySwitchToReference;
  switchDocumentAsReference: TswitchDocumentAsReference;
  tryVersionning: TtryVersionning;
  createVersionnedDocument: TcreateVersionnedDocument;
  ExpandBranch: TExpandBranch;
  {$ENDREGION}

  {$REGION 'U_BusinessObject'}
  businessObjectsToJSON: TbusinessObjectsToJSON;
  getContextMenuBusinessOptions: TgetContextMenuBusinessOptions;
  addBusinessObject: TaddBusinessObject;
  UpdateBusinessObject: TUpdateBusinessObject;
  CreateBusinessObjects: TCreateBusinessObjects;
  getBusinessObjectPath: TgetBusinessObjectPath;
  {$ENDREGION}

  {$REGION 'U_Object_Type'}
  OTsToJSON: TOTsToJSON;
  doOTsToJSON: TdoOTsToJSON;
  ListOTsToJSON: TListOTsToJSON;
  DoListOTsToJSON: TDoListOTsToJSON;
  getOTHint: TgetOTHint;
  doGetOTHint: TdoGetOTHint;
  {$ENDREGION}

  {$REGION 'U_Array'}
  getDataTableAndTableType: TgetDataTableAndTableType;
  saveDataTable: TsaveDataTable;
  fillDataTable: TfillDataTable;
  ExportTable: TExportTable;
  {$ENDREGION}

  {$REGION 'U_Associatives'}
  assoToJSON: TassoToJSON;
  saveAsso: TsaveAsso;
  {$ENDREGION}

  {$REGION 'U_Publisher'}
  getDataFileFiles: TgetDataFileFiles;
  getArchivedFiles: TgetArchivedFiles;
  saveDataFile: TsaveDataFile;
  DeleteFile: TDeleteFile;
  fillDataFile: TfillDataFile;
  {$ENDREGION}

  {$REGION 'U_Attribute'}
  attributesToJSON: TattributesToJSON;
  doAttributesToJSON: TdoAttributesToJSON;
  getAttributeHint: TgetAttributeHint;
  getIdsAttributesFromParent: TgetIdsAttributesFromParent;
  GetExportation: TGetExportation;
  {$ENDREGION}

  {$REGION 'U_WebTree_Manager'}
  DoAdd_WebTree: TDoAdd_WebTree;
  Get_WebTree: TGet_WebTree;
  Get_WebTree_SL_ID_Checked: TGet_WebTree_SL_ID_Checked;
  Get_WebTree_IdObjectsChecked: TGet_WebTree_IdObjectsChecked;
  OnRootNodeExpand: TOnRootNodeExpand;
  OnExpand: TOnExpand;
  OnCheck: TOnCheck;
  OnSelect: TOnSelect;
  Set_IDs_Object_Checked: TSet_IDs_Object_Checked;
  Set_IDs_Object_Disabled: TSet_IDs_Object_Disabled;
  Check_All: TCheck_All;
  UnCheck_All: TUnCheck_All;
  Switch_To_Linear_View: TSwitch_To_Linear_View;
  Switch_To_TreeView_View: TSwitch_To_TreeView_View;
  OnSearchEditEnter: TOnSearchEditEnter;
  GetNodesLegacy: TGetNodesLegacy;
  Add_ObjTree: TAdd_ObjTree;
  DoAdd_ObjTree: TDoAdd_ObjTree;
  Add_ListObjTree: TAdd_ListObjTree;
  Add_ListOTTree: TAdd_ListOTTree;
  Add_AttributeSetTree: TAdd_AttributeSetTree;
  DoAdd_AttributeSetTree: TDoAdd_AttributeSetTree;
  Add_AttributeTree: TAdd_AttributeTree;
  DoAdd_AttributeTree: TDoAdd_AttributeTree;
  Add_ListAttributeTree: TAdd_ListAttributeTree;
  DoRemoveTree: TDoRemoveTree;
  {$ENDREGION}

  {$REGION 'U_WebCombo_Manager'}
  Initialize_Combo: TInitialize_Combo;
  DoAdd_WebCombo: TDoAdd_WebCombo;
  Get_WebCombo: TGet_WebCombo;
  Add_ComboOT: TAdd_ComboOT;
  DoAdd_ComboOT: TDoAdd_ComboOT;
  Add_ComboListOT: TAdd_ComboListOT;
  Add_ComboListOT_Ext: TAdd_ComboListOT_Ext;
  Add_ComboObject: TAdd_ComboObject;
  Add_ComboObject_Ext: TAdd_ComboObject_Ext;
  DoAdd_ComboObject: TDoAdd_ComboObject;
  Add_ComboStd: TAdd_ComboStd;
  Add_ComboStd_Ext: TAdd_ComboStd_Ext;
  {$ENDREGION}


///<summary>Procedure loading the dll named "TxWebComponents".</summary>
///<param name="AFilePath">The absolute path to the dll.</param>
procedure Load_TxWebComponents(AFilePath: string);

///<summary>Procedure unloading the dll named "TxWebComponents".</summary>
procedure Unload_TxWebComponents;

///<summary>Function returning true if the dll "TxWebComponents" was loaded.</summary>
function Get_Dll_TxWebComponents_Loaded: boolean;

implementation

var
  hDll: THandle;

procedure Load_TxWebComponents(AFilePath: string);
resourcestring
  RS_Error_Invalide_File='Le fichier %s n''est pas valide.';
begin
  if hDll <> 0 then
    exit;

  Check_FileExists(AFilePath);

  hDll := Load_Dll(AFilePath);

  {$REGION 'U_Main_TxWebComponents'}
  @UpdateTxWebComponentLanguage := Get_Dll_Function_Adress(hDll,'UpdateTxWebComponentLanguage',AFilePath);
  {$ENDREGION}

  {$REGION 'U_Object'}
  @objectsToJSON := Get_Dll_Function_Adress(hDll,'objectsToJSON',AFilePath);
  @objectsFromIdsToJSON := Get_Dll_Function_Adress(hDll,'objectsFromIdsToJSON',AFilePath);
  @objectsFromValueToJSON := Get_Dll_Function_Adress(hDll,'objectsFromValueToJSON',AFilePath);
  @doObjectsToJSON := Get_Dll_Function_Adress(hDll,'doObjectsToJSON',AFilePath);
  @olObjectsToJSON := Get_Dll_Function_Adress(hDll,'olObjectsToJSON',AFilePath);
  @getIdsObjectFromParent := Get_Dll_Function_Adress(hDll,'getIdsObjectFromParent',AFilePath);
  @getObjectHint := Get_Dll_Function_Adress(hDll,'getObjectHint',AFilePath);
  @getObjectPath := Get_Dll_Function_Adress(hDll,'getObjectPath',AFilePath);
  @removeObject := Get_Dll_Function_Adress(hDll,'removeObject',AFilePath);
  @switchFolderObject := Get_Dll_Function_Adress(hDll,'switchFolderObject',AFilePath);
  @compareObject := Get_Dll_Function_Adress(hDll,'compareObject',AFilePath);
  @renameObject := Get_Dll_Function_Adress(hDll,'renameObject',AFilePath);
  @sortObject := Get_Dll_Function_Adress(hDll,'sortObject',AFilePath);
  @moveObject := Get_Dll_Function_Adress(hDll,'moveObject',AFilePath);
  @wGetTxPropertyInfo := Get_Dll_Function_Adress(hDll,'wGetTxPropertyInfo',AFilePath);
  @wGetTxDuplicationInfo := Get_Dll_Function_Adress(hDll,'wGetTxDuplicationInfo',AFilePath);
  @wGetTxCompareInfo := Get_Dll_Function_Adress(hDll,'wGetTxCompareInfo',AFilePath);
  @getContextMenuOptions := Get_Dll_Function_Adress(hDll,'getContextMenuOptions',AFilePath);
  @getContextMenuApplicationModelOptions := Get_Dll_Function_Adress(hDll,'getContextMenuApplicationModelOptions',AFilePath);
  @trySwitchToReference := Get_Dll_Function_Adress(hDll,'trySwitchToReference',AFilePath);
  @switchDocumentAsReference := Get_Dll_Function_Adress(hDll,'switchDocumentAsReference',AFilePath);
  @tryVersionning := Get_Dll_Function_Adress(hDll,'tryVersionning',AFilePath);
  @createVersionnedDocument := Get_Dll_Function_Adress(hDll,'createVersionnedDocument',AFilePath);
  @ExpandBranch := Get_Dll_Function_Adress(hDll,'ExpandBranch',AFilePath);
  {$ENDREGION}

  {$REGION 'U_BusinessObject'}
  @businessObjectsToJSON := Get_Dll_Function_Adress(hDll,'businessObjectsToJSON',AFilePath);
  @getContextMenuBusinessOptions := Get_Dll_Function_Adress(hDll,'getContextMenuBusinessOptions',AFilePath);
  @addBusinessObject := Get_Dll_Function_Adress(hDll,'addBusinessObject',AFilePath);
  @UpdateBusinessObject := Get_Dll_Function_Adress(hDll,'UpdateBusinessObject',AFilePath);
  @CreateBusinessObjects := Get_Dll_Function_Adress(hDll,'CreateBusinessObjects',AFilePath);
  @getBusinessObjectPath := Get_Dll_Function_Adress(hDll,'getBusinessObjectPath',AFilePath);
  {$ENDREGION}

  {$REGION 'U_Object_Type'}
  @OTsToJSON := Get_Dll_Function_Adress(hDll,'OTsToJSON',AFilePath);
  @doOTsToJSON := Get_Dll_Function_Adress(hDll,'doOTsToJSON',AFilePath);
  @ListOTsToJSON := Get_Dll_Function_Adress(hDll,'ListOTsToJSON',AFilePath);
  @DoListOTsToJSON := Get_Dll_Function_Adress(hDll,'DoListOTsToJSON',AFilePath);
  @getOTHint := Get_Dll_Function_Adress(hDll,'getOTHint',AFilePath);
  @doGetOTHint := Get_Dll_Function_Adress(hDll,'doGetOTHint',AFilePath);
  {$ENDREGION}

  {$REGION 'U_Array'}
  @getDataTableAndTableType := Get_Dll_Function_Adress(hDll,'getDataTableAndTableType',AFilePath);
  @saveDataTable := Get_Dll_Function_Adress(hDll,'saveDataTable',AFilePath);
  @fillDataTable := Get_Dll_Function_Adress(hDll,'fillDataTable',AFilePath);
  @ExportTable := Get_Dll_Function_Adress(hDll,'ExportTable',AFilePath);
  {$ENDREGION}

  {$REGION 'U_Associatives'}
  @assoToJSON := Get_Dll_Function_Adress(hDll,'assoToJSON',AFilePath);
  @saveAsso := Get_Dll_Function_Adress(hDll,'saveAsso',AFilePath);
  {$ENDREGION}

  {$REGION 'U_Publisher'}
  @getDataFileFiles := Get_Dll_Function_Adress(hDll,'getDataFileFiles',AFilePath);
  @getArchivedFiles := Get_Dll_Function_Adress(hDll,'getArchivedFiles',AFilePath);
  @saveDataFile := Get_Dll_Function_Adress(hDll,'saveDataFile',AFilePath);
  @DeleteFile := Get_Dll_Function_Adress(hDll,'DeleteFile',AFilePath);
  @fillDataFile := Get_Dll_Function_Adress(hDll,'fillDataFile',AFilePath);
  {$ENDREGION}

  {$REGION 'U_Attribute'}
  @attributesToJSON := Get_Dll_Function_Adress(hDll,'attributesToJSON',AFilePath);
  @doAttributesToJSON := Get_Dll_Function_Adress(hDll,'doAttributesToJSON',AFilePath);
  @getAttributeHint := Get_Dll_Function_Adress(hDll,'getAttributeHint',AFilePath);
  @getIdsAttributesFromParent := Get_Dll_Function_Adress(hDll,'getIdsAttributesFromParent',AFilePath);
  @GetExportation := Get_Dll_Function_Adress(hDll,'GetExportation',AFilePath);
  {$ENDREGION}

  {$REGION 'U_WebTree_Manager'}
  @DoAdd_WebTree := Get_Dll_Function_Adress(hDll,'DoAdd_WebTree',AFilePath);
  @Get_WebTree := Get_Dll_Function_Adress(hDll,'Get_WebTree',AFilePath);
  @Get_WebTree_SL_ID_Checked := Get_Dll_Function_Adress(hDll,'Get_WebTree_SL_ID_Checked',AFilePath);
  @Get_WebTree_IdObjectsChecked := Get_Dll_Function_Adress(hDll,'Get_WebTree_IdObjectsChecked',AFilePath);
  @OnRootNodeExpand := Get_Dll_Function_Adress(hDll,'OnRootNodeExpand',AFilePath);
  @OnExpand := Get_Dll_Function_Adress(hDll,'OnExpand',AFilePath);
  @OnCheck := Get_Dll_Function_Adress(hDll,'OnCheck',AFilePath);
  @OnSelect := Get_Dll_Function_Adress(hDll,'OnSelect',AFilePath);
  @Set_IDs_Object_Checked := Get_Dll_Function_Adress(hDll,'Set_IDs_Object_Checked',AFilePath);
  @Set_IDs_Object_Disabled := Get_Dll_Function_Adress(hDll,'Set_IDs_Object_Disabled',AFilePath);
  @Check_All := Get_Dll_Function_Adress(hDll,'Check_All',AFilePath);
  @UnCheck_All := Get_Dll_Function_Adress(hDll,'UnCheck_All',AFilePath);
  @Switch_To_Linear_View := Get_Dll_Function_Adress(hDll,'Switch_To_Linear_View',AFilePath);
  @Switch_To_TreeView_View := Get_Dll_Function_Adress(hDll,'Switch_To_TreeView_View',AFilePath);
  @OnSearchEditEnter := Get_Dll_Function_Adress(hDll,'OnSearchEditEnter',AFilePath);
  @GetNodesLegacy := Get_Dll_Function_Adress(hDll,'GetNodesLegacy',AFilePath);
  @Add_ObjTree := Get_Dll_Function_Adress(hDll,'Add_ObjTree',AFilePath);
  @DoAdd_ObjTree := Get_Dll_Function_Adress(hDll,'DoAdd_ObjTree',AFilePath);
  @Add_ListObjTree := Get_Dll_Function_Adress(hDll,'Add_ListObjTree',AFilePath);
  @Add_ListOTTree := Get_Dll_Function_Adress(hDll,'Add_ListOTTree',AFilePath);
  @Add_AttributeSetTree := Get_Dll_Function_Adress(hDll,'Add_AttributeSetTree',AFilePath);
  @DoAdd_AttributeSetTree := Get_Dll_Function_Adress(hDll,'DoAdd_AttributeSetTree',AFilePath);
  @Add_AttributeTree := Get_Dll_Function_Adress(hDll,'Add_AttributeTree',AFilePath);
  @DoAdd_AttributeTree := Get_Dll_Function_Adress(hDll,'DoAdd_AttributeTree',AFilePath);
  @Add_ListAttributeTree := Get_Dll_Function_Adress(hDll,'Add_ListAttributeTree',AFilePath);
  @DoRemoveTree := Get_Dll_Function_Adress(hDll,'DoRemoveTree',AFilePath);
  {$ENDREGION}

  {$REGION 'U_WebCombo_Manager'}
  @Initialize_Combo := Get_Dll_Function_Adress(hDll,'Initialize_Combo',AFilePath);
  @DoAdd_WebCombo := Get_Dll_Function_Adress(hDll,'DoAdd_WebCombo',AFilePath);
  @Get_WebCombo := Get_Dll_Function_Adress(hDll,'Get_WebCombo',AFilePath);
  @Add_ComboOT := Get_Dll_Function_Adress(hDll,'Add_ComboOT',AFilePath);
  @DoAdd_ComboOT := Get_Dll_Function_Adress(hDll,'DoAdd_ComboOT',AFilePath);
  @Add_ComboListOT := Get_Dll_Function_Adress(hDll,'Add_ComboListOT',AFilePath);
  @Add_ComboListOT_Ext := Get_Dll_Function_Adress(hDll,'Add_ComboListOT_Ext',AFilePath);
  @Add_ComboObject := Get_Dll_Function_Adress(hDll,'Add_ComboObject',AFilePath);
  @Add_ComboObject_Ext := Get_Dll_Function_Adress(hDll,'Add_ComboObject_Ext',AFilePath);
  @DoAdd_ComboObject := Get_Dll_Function_Adress(hDll,'DoAdd_ComboObject',AFilePath);
  @Add_ComboStd := Get_Dll_Function_Adress(hDll,'Add_ComboStd',AFilePath);
  @Add_ComboStd_Ext := Get_Dll_Function_Adress(hDll,'Add_ComboStd_Ext',AFilePath);
  {$ENDREGION}


end;

procedure Unload_TxWebComponents;
begin
  if hDll <> 0 then
  begin
    try
      FreeLibrary(hDll);
      hDll := 0;
    except
    end;
  end;
end;

function Get_Dll_TxWebComponents_Loaded: boolean;
begin
  result := (hDll>0)
end;

initialization
  hDll := 0;

finalization
  Unload_TxWebComponents;

end.