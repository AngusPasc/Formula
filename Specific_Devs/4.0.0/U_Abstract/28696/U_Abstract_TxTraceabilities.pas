///<author>dev@bassetti.fr</author>
///<summary>Unit loading / unloading the dll named "TxTraceabilities". This file is generated by TXUtils. Do not modify.</summary>
unit U_Abstract_TxTraceabilities;
interface

uses
  SysUtils,Windows,Contnrs,Classes,U_Small_Lib, U_Class, U_Abstract;

type
  {$REGION 'U_WebTraceabilities'}
  TGetObjectTraceabilities=function(AArrParameter: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}

  {$REGION 'U_TxTraceabilitiesHelper'}
  TWinHelper=class(TObject)
  public
    procedure DisplayTraceabilitiesForm(const AIdObject: Integer); virtual; stdcall; abstract;
  end;

  TTxTraceabilitiesHelper=class(TObject)
  public
    ///<summary>Method returning the traceabilities of a given object.</summary>
    ///<returns>The method returns a TObjectList object containing TMD_ObjectTraceability objects. The list owns its objects. Do not forget to free the list object.</returns>
    function GetObjectTraceabilities_(const AIdObject: Integer): TObjectList; virtual; stdcall; abstract;
    ///<summary>Function returning the last traceability writing date of a given object.</summary>
    function GetObjectLastModificationDate(const AIdObject: Integer): Double; virtual; stdcall; abstract;
    function Win: TWinHelper; virtual; stdcall; abstract;
  end;

  ///<summary>Traceabilities helper / manager.</summary>
  T_TxTraceabilities=function: TTxTraceabilitiesHelper; stdcall;
  {$ENDREGION}



var
  {$REGION 'U_WebTraceabilities'}
  GetObjectTraceabilities: TGetObjectTraceabilities;
  {$ENDREGION}

  {$REGION 'U_TxTraceabilitiesHelper'}
  _TxTraceabilities: T_TxTraceabilities;
  {$ENDREGION}


///<summary>Procedure loading the dll named "TxTraceabilities".</summary>
///<param name="AFilePath">The absolute path to the dll.</param>
procedure Load_TxTraceabilities(AFilePath: string);

///<summary>Procedure unloading the dll named "TxTraceabilities".</summary>
procedure Unload_TxTraceabilities;

///<summary>Function returning true if the dll "TxTraceabilities" was loaded.</summary>
function Get_Dll_TxTraceabilities_Loaded: boolean;

implementation

var
  hDll: THandle;

procedure Load_TxTraceabilities(AFilePath: string);
resourcestring
  RS_Error_Invalide_File='Le fichier %s n''est pas valide.';
begin
  if hDll <> 0 then
    exit;

  Check_FileExists(AFilePath);

  hDll := Load_Dll(AFilePath);

  {$REGION 'U_WebTraceabilities'}
  @GetObjectTraceabilities := Get_Dll_Function_Adress(hDll,'GetObjectTraceabilities',AFilePath);
  {$ENDREGION}

  {$REGION 'U_TxTraceabilitiesHelper'}
  @_TxTraceabilities := Get_Dll_Function_Adress(hDll,'_TxTraceabilities',AFilePath);
  {$ENDREGION}


end;

procedure Unload_TxTraceabilities;
begin
  if hDll <> 0 then
  begin
    try
      FreeLibrary(hDll);
      hDll := 0;
    except
    end;
  end;
end;

function Get_Dll_TxTraceabilities_Loaded: boolean;
begin
  result := (hDll>0)
end;

initialization
  hDll := 0;

finalization
  Unload_TxTraceabilities;

end.