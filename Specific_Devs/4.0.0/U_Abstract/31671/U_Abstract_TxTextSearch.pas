///<author>dev@bassetti.fr</author>
///<summary>Unit loading / unloading the dll named "TxTextSearch". This file is generated by TXUtils. Do not modify.</summary>
unit U_Abstract_TxTextSearch;
interface

uses
  SysUtils,Windows,Contnrs,Classes,U_Small_Lib, U_Class, U_Abstract;

type
  {$REGION 'U_CommonTxTextSearch'}
  ///<summary>Enumeration of the search types.</summary>
  TSearchCondition=(
    ///Keywords are linked by an "AND" operator.
    scAND,
    ///Keywords are linked by an "OR" operator.
    scOR,
    ///Keywords are linked by a "WITHOUT(AND)" operator.
    scWITHOUT);

  ///<summary>Enumeration of the search types.</summary>
  TSolRCollectionType=(
    sctArchivedFiles,
    sctExternalServer);

  ///<summary>No keyword was passed to a search function.</summary>
  ENoKeyword=class(ECoded_Error);
  {$ENDREGION}

  {$REGION 'U_TextSearchFilter'}
  ///<summary>Class storing the information of an TextSearch data Type.</summary>
  TTextSearchFilter=class(TTree)
  public
    function GetPagesCount: Integer; virtual; stdcall; abstract;
    procedure SetNbResults(const ANbResults: Integer); virtual; stdcall; abstract;
    function GetNbResults: Integer; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_ExternalServerFile'}
  TExternalServerFile=class(TTree)
  public
    procedure SetFilePath(const AFilePath: string); virtual; stdcall; abstract;
    function GetFilePath: string; virtual; stdcall; abstract;
    function ToTxObj: TTree_Object; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TextSearchResults'}
  TSearchType=(
    stUndefined,
    stTEEXMA,
    stFiles,
    stExternalServers);

  TTextSearchResults=class(TID)
  public
    function SearchIntoObjects(const AAndWords: string; const AOrWords: string; const AWithoutWords: string; const AIdFilteringOT: Integer; const ASearchInLkdObjects: Boolean; const ASearchInData: Boolean): Integer; virtual; stdcall; abstract;
    function SearchIntoObjectsFiles(const AAndWords: string; const AOrWords: string; const AWithoutWords: string; const AIdFilteringOT: Integer): Integer; virtual; stdcall; abstract;
    function SearchIntoExternalServer(const AAndWords: string; const AOrWords: string; const AWithoutWords: string): Integer; virtual; stdcall; abstract;
    function CreateOlObject(const AIdFilter: Integer; const AIncludeFolders: Boolean=True; const AOrderingType: TObject_Ordering_Type=ootObject_Type; const ADataType: Integer=-3): TObjectList; virtual; stdcall; abstract;
    function CreateOlPagedObject(const AIdFilter: Integer; const APage: Integer; const AIncludeFolders: Boolean=True; const AOrderingType: TObject_Ordering_Type=ootObject_Type; const ADataType: Integer=-3): TObjectList; virtual; stdcall; abstract;
    function GetOlFilter: TObjectList; virtual; stdcall; abstract;
    function IsFilterInResults(const AIdFilter: Integer): Boolean; virtual; stdcall; abstract;
    function GetSearchType: TSearchType; virtual; stdcall; abstract;
    function GetNbResults: Integer; virtual; stdcall; abstract;
    function GetPagesCount(const AIdFilter: Integer): Integer; virtual; stdcall; abstract;
  end;
  {$ENDREGION}

  {$REGION 'U_TxTextSearchFunctions'}
  TWinServiceHelper=class(TObject)
  public
    function ImportAndClean(const AType: TSolRCollectionType): string; virtual; stdcall; abstract;
    function DeltaImportAndClean: string; virtual; stdcall; abstract;
    function SplitFulltextCrawlLog: Integer; virtual; stdcall; abstract;
  end;

  TAdvancedHelper=class(TObject)
  public
    function AddTextSearchResults: TTextSearchResults; virtual; stdcall; abstract;
    procedure RemoveTextSearchResult(const AIdTextSearchResults: Integer); overload; virtual; stdcall; abstract;
    procedure RemoveTextSearchResult(const ATextSearchResult: TTextSearchResults); overload; virtual; stdcall; abstract;
    function GetTextSearchResult(const AIdTextSearchResults: Integer): TTextSearchResults; virtual; stdcall; abstract;
    function SearchObjectsInLinkAttribute_(const AIdLinkAttribute: Integer; const AID_Object: Integer; const AAndWords: string): TObjectList; virtual; stdcall; abstract;
    function FilterObjectsList_(const AOlObject: TObjectList; const AAndWords: string): TObjectList; virtual; stdcall; abstract;
  end;

  TTxTextSearchHelper=class(TObject)
  public
    ///<summary>Function returning a list of TS_Object objects corresponding to given text search criteria.</summary>
    ///<param name="AAndWords">A list of And words, separated with blank.</param>
    ///<param name="AidFilteringOT">A filtering object type identifier. If &lt;1, the search is done on the whole list of relevant Objects Types.</param>
    function SearchObjects_(const AAndWords: string; const AidFilteringOT: Integer=0): TObjectList; overload; virtual; stdcall; abstract;
    ///<summary>Function returning a list of TS_Object objects corresponding to given text search criteria.</summary>
    ///<param name="AAndWords">A list of And words, separated with blank.</param>
    ///<param name="AOrWords">A list of Or words, separated with blank.</param>
    ///<param name="AWithoutWords">A list of without words, separated with blank.</param>
    ///<param name="AIdFilteringOT">A filtering object type identifier. If &lt;1, the search is done on the whole list of relevant Objects Types.</param>
    ///<param name="ASearchInLkdObjects">If true, the search is done into the linked objects names as well. This option as a significative impact on the performances.</param>
    ///<param name="ASearchInData">If true, the search is done into the data (other than links). This option as a significative impact on the performances.</param>
    ///<param name="AContext">A context of use. Per default, it is considered to be executed by a specific developpment.</param>
    function SearchObjects_(const AAndWords: string; const AOrWords: string; const AWithoutWords: string; const AIdFilteringOT: Integer; const ASearchInLkdObjects: Boolean; const ASearchInData: Boolean; const AContext: TLog_Action_Context=lacDev): TObjectList; overload; virtual; stdcall; abstract;
    ///<summary>Access to the advanced functions</summary>
    function Advanced: TAdvancedHelper; virtual; stdcall; abstract;
    ///<summary>Access to the maintenance task functions.</summary>
    function Service: TWinServiceHelper; virtual; stdcall; abstract;
  end;

  ///<summary>Access to the text search functions.</summary>
  T_TextSearch=function: TTxTextSearchHelper; stdcall;
  {$ENDREGION}

  {$REGION 'U_TxTextSearchWeb'}
  ///<summary>Function returning settings concerning the text search function.</summary>
  ///<summary>Output n?0: Ok or an error message.</summary>
  ///<summary>Output n?1: If true, the text search into the TEEXMA files is activated.</summary>
  ///<summary>Output n?2: If true, the text search into the external files servers is activated.</summary>
  TwGetTextSearchSettings=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function executing a text search into the TEEXMA objects.</summary>
  ///<summary>Input n?0: the identifier of the TxTextSearchResults object. if nul, a new one is automatically created.</summary>
  ///<summary>Input n?1: And words.</summary>
  ///<summary>Input n?2: Or words.</summary>
  ///<summary>Input n?3: Without words.</summary>
  ///<summary>Input n?4: Search into the data.</summary>
  ///<summary>Input n?5: The identifier of the Object Type to select per default (if possible).</summary>
  ///<summary>Output n?0: Ok or an error message.</summary>
  ///<summary>Output n?1: the identifier of the TxTextSearchResults object.</summary>
  ///<summary>Output n?2: the json corresponding to the filters.</summary>
  ///<summary>Output n?3: the number of pages of the selected filter.</summary>
  ///<summary>Output n?4 the json corresponding to the objects of the first page.</summary>
  ///<summary>Output n?5: the identifier of the selected filter.</summary>
  TwSearchIntoObjects=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function executing a text search into the files stored into TEEXMA.</summary>
  ///<summary>Input n?0: the identifier of the TxTextSearchResults object. if nul, a new one is automatically created.</summary>
  ///<summary>Input n?1: And words.</summary>
  ///<summary>Input n?2: Or words.</summary>
  ///<summary>Input n?3: Without words.</summary>
  ///<summary>Input n?4: The identifier of the Object Type to select per default (if possible).</summary>
  ///<summary>Output n?0: Ok or an error message.</summary>
  ///<summary>Output n?1: the identifier of the TxTextSearchResults object.</summary>
  ///<summary>Output n?2: the json corresponding to the filters.</summary>
  ///<summary>Output n?3: the number of pages of the selected filter.</summary>
  ///<summary>Output n?4 the json corresponding to the objects of the first page.</summary>
  ///<summary>Output n?5: the identifier of the selected filter.</summary>
  TwSearchIntoObjectsFiles=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function executing a text search into external servers.</summary>
  ///<summary>Input n?0: the identifier of the TxTextSearchResults object. if nul, a new one is automatically created.</summary>
  ///<summary>Input n?1: And words.</summary>
  ///<summary>Input n?2: Or words.</summary>
  ///<summary>Input n?3: Without words.</summary>
  ///<summary>Output n?0: Ok or an error message.</summary>
  ///<summary>Output n?1: the identifier of the TxTextSearchResults object.</summary>
  ///<summary>Output n?2: the json corresponding to the filters.</summary>
  ///<summary>Output n?3: the number of pages of the first (and selected) filter.</summary>
  ///<summary>Output n?4 the json corresponding to the objects of the first page.</summary>
  TwSearchIntoExternalServers=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function returning the result of a given filter/page.</summary>
  ///<summary>Input n?0: the identifier of the TxTextSearchResults object. It cannot be null.</summary>
  ///<summary>Input n?1: the filter identifier.</summary>
  ///<summary>Input n?2: the page index. If equal to -1, the function returns the whole list of results.</summary>
  ///<summary>Output n?0: Ok or an error message.</summary>
  ///<summary>Output n?1 the number of pages of the selected filter.</summary>
  ///<summary>Output n?2 the json corresponding to the objects of the selected page.</summary>
  TwOnPageOrFilterChange=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function freeing a given TxTextSearchResults object.</summary>
  ///<summary>Input n?0: the identifier of the TxTextSearchResults object. It cannot be null.</summary>
  ///<summary>Output n?0: Ok or an error message.</summary>
  TwFreeTextSearchResults=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;

  ///<summary>Function executing a text search into the TEEXMA objects corresponding to a given link Attribute.</summary>
  ///<summary>Input n?0: The identifier of the attribute.</summary>
  ///<summary>Input n?1: The identifier of the object.</summary>
  ///<summary>Input n?2: And words.</summary>
  ///<summary>Output n?0: Ok or an error message.</summary>
  ///<summary>Output n?1: the json corresponding to the objects.</summary>
  TwSearchIntoLinkAttribute=function(AArrInput: array of TVarRec): TArr_VarRec; stdcall;
  {$ENDREGION}



var
  {$REGION 'U_TxTextSearchFunctions'}
  _TextSearch: T_TextSearch;
  {$ENDREGION}

  {$REGION 'U_TxTextSearchWeb'}
  wGetTextSearchSettings: TwGetTextSearchSettings;
  wSearchIntoObjects: TwSearchIntoObjects;
  wSearchIntoObjectsFiles: TwSearchIntoObjectsFiles;
  wSearchIntoExternalServers: TwSearchIntoExternalServers;
  wOnPageOrFilterChange: TwOnPageOrFilterChange;
  wFreeTextSearchResults: TwFreeTextSearchResults;
  wSearchIntoLinkAttribute: TwSearchIntoLinkAttribute;
  {$ENDREGION}


///<summary>Procedure loading the dll named "TxTextSearch".</summary>
///<param name="AFilePath">The absolute path to the dll.</param>
procedure Load_TxTextSearch(AFilePath: string);

///<summary>Procedure unloading the dll named "TxTextSearch".</summary>
procedure Unload_TxTextSearch;

///<summary>Function returning true if the dll "TxTextSearch" was loaded.</summary>
function Get_Dll_TxTextSearch_Loaded: boolean;

implementation

var
  hDll: THandle;

procedure Load_TxTextSearch(AFilePath: string);
resourcestring
  RS_Error_Invalide_File='Le fichier %s n''est pas valide.';
begin
  if hDll <> 0 then
    exit;

  Check_FileExists(AFilePath);

  hDll := Load_Dll(AFilePath);

  {$REGION 'U_TxTextSearchFunctions'}
  @_TextSearch := Get_Dll_Function_Adress(hDll,'_TextSearch',AFilePath);
  {$ENDREGION}

  {$REGION 'U_TxTextSearchWeb'}
  @wGetTextSearchSettings := Get_Dll_Function_Adress(hDll,'wGetTextSearchSettings',AFilePath);
  @wSearchIntoObjects := Get_Dll_Function_Adress(hDll,'wSearchIntoObjects',AFilePath);
  @wSearchIntoObjectsFiles := Get_Dll_Function_Adress(hDll,'wSearchIntoObjectsFiles',AFilePath);
  @wSearchIntoExternalServers := Get_Dll_Function_Adress(hDll,'wSearchIntoExternalServers',AFilePath);
  @wOnPageOrFilterChange := Get_Dll_Function_Adress(hDll,'wOnPageOrFilterChange',AFilePath);
  @wFreeTextSearchResults := Get_Dll_Function_Adress(hDll,'wFreeTextSearchResults',AFilePath);
  @wSearchIntoLinkAttribute := Get_Dll_Function_Adress(hDll,'wSearchIntoLinkAttribute',AFilePath);
  {$ENDREGION}


end;

procedure Unload_TxTextSearch;
begin
  if hDll <> 0 then
  begin
    try
      FreeLibrary(hDll);
      hDll := 0;
    except
    end;
  end;
end;

function Get_Dll_TxTextSearch_Loaded: boolean;
begin
  result := (hDll>0)
end;

initialization
  hDll := 0;

finalization
  Unload_TxTextSearch;

end.